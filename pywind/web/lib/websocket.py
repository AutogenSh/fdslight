#!/usr/bin/env python3import pywind.lib.reader as readerimport randomdef _codec_data(mask_key, byte_data):    seq = []    for ch in byte_data:        n = ch % 4        seq.append(ch ^ mask_key[n])    return seqclass encoder(object):    slice_size = 4 * 1024    rsv = 0    opcode = 0x2    __server_side = None    def __init__(self, server_side=False):        self.__server_side = server_side    def __gen_mask_key(self):        sts = "1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPQASDFGHJKLZXCVBNM"        m = len(sts) - 1        seq = []        for i in range(4):            n = random.randint(0, m)            seq.append(sts[n])        return "".join(seq).encode("iso-8859-1")    def __get_ws_frame(self, fin, opcode, byte_data):        seq = [            ((fin & 0x1) << 7) | ((self.rsv & 0x7) << 4) | (opcode & 0xf),        ]        size = len(byte_data)        mask_key = None        if self.__server_side:            mask = 0        else:            mask = 1            mask_key = self.__gen_mask_key()        if size < 126:            payload = size        elif size < 0x10000:            payload = 126        else:            payload = 127        seq.append(mask | payload)        if mask: seq += list(mask_key)        if mask: seq += _codec_data(mask_key, byte_data)        return bytes(seq)    def get_sent_data(self, byte_data):        """获取发送数据"""        seq = []        data_len = len(byte_data)        b, e = (0, self.slice_size,)        while b < data_len:            seq.append(byte_data[b:e])            b, e = (e, e + self.slice_size,)        results = []        bufsize = 0        for data in seq:            wrap_data = self.__get_ws_frame(0, 0, data)            results.append(wrap_data)            bufsize += len(wrap_data)        return (bufsize, b"".join(results),)class decoder(object):    __reader = None    # 每个帧的最大数据大小    max_payload_size = 2 * 1024 * 1024    __payload = 0    __read_size = 0    __fin = 0    def __init__(self, server_side=False):        self.__reader = reader.reader()    def __parse(self):        seq = []        while self.__reader.size() > 2:            backup_seq = []            n = ord(self.__reader.read(1))            backup_seq.append(n)            fin = (n & 0x80) >> 7            rsv = (n & 0x70) >> 4            n = ord(self.__reader.read(1))            backup_seq.append(n)            mask = (n & 0x80) >> 7            payload = n & 0x7f        return seq    def input(self, byte_data):        self.__reader._putvalue(byte_data)    def get_data(self):        pass    def is_frame_finish(self):        """单个数据帧是否结束"""        return self.__read_size == self.__read_size    def is_all_finish(self):        """所有的分帧数据是否结束"""        return self.__fin